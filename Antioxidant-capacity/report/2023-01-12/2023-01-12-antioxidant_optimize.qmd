---
title: "Antioxidant Capacity Assay"
author: "Brian and Jack"
format:
  html:
    toc: true
    toc-location: left
    code-fold: true
---

## Objective

To determine whether the antioxidant capacity assay is compatible with our isolated HDL, HDL isolated by sequential flotation ultracentrifugation followed by SEC using our FPLC. This cell-free assay measure HDL function by its ability to inhibit oxidation of Dihydrorhodamine 123 (DHR) mediated by azobis.

## Sample Type

1.   apob-dep_2 = 2% ApoB-depleted plasma

2.  apob-dep_5 = 5% ApoB-depleted plasma

3.  HDL_1ug - 1 ug of HDL in 175 uL total volume

4.  HDL_5ug - 5 ug of HDL in 175 uL total volume

5.  HDL_10ug - 10 ug of HDL in 175 uL total volume

6.  HDL_20ug - 20 ug of HDL in 175 uL total volume

## Packages

```{r}
if(!any(rownames(installed.packages()) == "pacman"))
        install.packages("pacman")

pacman::p_load(tidyverse,
               DT,
               readxl,
               here,
               lubridate,
               reshape2,
               ggpubr,
               rstatix,
               multcomp,
               emmeans)
select <- dplyr::select
```

## Read Files

```{r}

#| message: false
AOC <- read_excel(path = here("Antioxidant-capacity", "raw","2023-01-12-antioxidant_optimize_column_wise.xlsx"),
                  range = "B41:AG72") |>
        separate(col = "Time", 
                 into = c("date","time"), 
                 sep = " ",
                 remove = TRUE) |>
        select(!c(date, `TÂ° 485,538`)) |>
        mutate(time =  lubridate::hms(time),
               minutes = minute(time),
               .after = time) |>
        select(!time) |>
        pivot_longer(
    cols = -c(minutes),
    names_to = "position",
    values_to = "value")

plate_layout <- read_excel(path = here("Antioxidant-capacity","plate_layout","2023-01-12-antioxidant_optimize_plate_layout.xlsx"),
                           range = "A1:M9") |>
        column_to_rownames("...1") |>
        as.matrix() |>
        melt() |>
        rename(sample = "value")
plate_layout$position <- paste0(plate_layout$Var1, plate_layout$Var2)

AOC <- left_join(AOC, plate_layout)
```

## Determine where slope is linear

```{r}
ggplot(AOC, aes(x = minutes, y = value, color = position)) +
        geom_line()
```

> Looks linear from 1 min to 20 min. Slope (RFU/min) is calculated between those two times.

### Calculate Slopes (RFU/min)

```{r}
AOC_slope <- AOC |>
        filter(minutes %in% c("1","20")) |>
        group_by(sample) |>
        summarize(slope = (value[minutes== 20] - value[minutes==1])/
                          (20-1)) |>
        filter(!sample %in% "background")

datatable(AOC_slope)
```

### Slope Plot

```{r}
#| fig-width: 10
#| fig-height: 10

########## CLD stats Slope figure ###################
# ANOVA
anova <- aov(slope ~ sample, data = AOC_slope)

# Extract P-value
p_value <- signif(summary(anova)[[1]][["Pr(>F)"]][1],3)

# Contrast with Tukey Adjustmnet + Assign letters
emmcld <- anova |>
emmeans(~ sample) |>
  multcomp::cld(Letters = letters, 
                adjust = "Tukey",
                sort = FALSE)



## Data Summary ##
dt_summary <- AOC_slope |>
  group_by(sample) |>
        summarize(mean = mean(slope),
                  sd = sd(slope))
## cbind

gg_df <- left_join(dt_summary, emmcld, by = "sample")

ggplot() + 
        
        geom_bar(data = gg_df,
    aes(y = mean, x = sample, fill = sample), stat = "identity", show.legend = TRUE) +
        
        geom_errorbar(data = gg_df,
                aes(
                  ymin = mean - sd,
                  ymax = mean + sd,
                  x = sample
                ),
                width = 0.1)  + 
        
        labs(x = "Sample", y = "RFU/min") +
        
# letters
  geom_text(
    data = gg_df,
    aes(
      y = emmean + sd,
      x = sample,
      label = str_trim(.group)
    ),
    hjust = 0.5,
    vjust = -0.5,
    size=8
  ) +
        theme_classic() +
        theme(axis.text = element_text(angle = 90, color = "black"),
              text = element_text(size = 20),
              legend.position = "top") +
        ylim(0, max(gg_df$mean)*1.5)
```

## Calculate Incremental AUC

```{r}
#| warning: false
### iAUC Function
i_auc <- function(x, y) {
    auc <- 0
    seg.type <- vector("character", length(x)-1)
    # y[1] is the baseline
    # centralize y to the baseline
    dy <- y - y[1]
    for (i in 1:(length(x)-1)) {
        if (dy[i] >= 0 & dy[i+1] >= 0) {
            auc[i] <- (dy[i+1] + dy[i]) * (x[i+1] - x[i])/2
            seg.type[i] <- "all pos"
        } else if (dy[i] >= 0 & dy[i+1] < 0) {
            auc[i] <- (x[i+1] - x[i]) * (-dy[i]^2)/(2 * (dy[i+1] - dy[i]))
            seg.type[i] <- "pos-neg"
        } else if (dy[i] < 0 & dy[i+1] < 0) {
            auc[i] <- 0
            seg.type[i] <- "all neg"
        } else if (dy[i] < 0 & dy[i+1] >= 0) {
            auc[i] <- (x[i+1] - x[i]) * dy[i+1]^2/(2 * (dy[i+1] - dy[i]))
            seg.type[i] <- "neg-pos"
        } else {
            return(cat("i:", i, "Error: No condition met\n"))
        }
    }
    return(list(auc = sum(auc), segments = auc, seg.type = seg.type))
}

## Calculate iAUC from AOC Data.frame
iAUC.df <- AOC |>
        group_by(position) |>
        arrange(minutes) |>
        filter(minutes %in% 1:20) |>
        group_modify(~ broom::tidy(i_auc(.x$minutes, .x$value)$auc)) |>
        rename(iAUC = "x")

AOC_iAUC <- left_join(AOC, iAUC.df)

AOC_iAUC_summary <- AOC_iAUC |>
        group_by(position, sample) |>
        summarize(iAUC = mean(iAUC))  |>
        filter(!sample %in% "background")

datatable(AOC_iAUC_summary |>
        group_by(sample) |> 
        summarize(mean_iAUC = round(mean(iAUC),2),
                  SD_iAUC = round(sd(iAUC),2),
                  CV_iAUC = round(SD_iAUC/mean_iAUC*100, 2)))
```

### Incremental AUC Plot

```{r}
#| fig-width: 10
#| fig-height: 10

########## CLD stats for iAUC figure ###################
# ANOVA
anova <- aov(iAUC ~ sample, data = AOC_iAUC_summary)

# Extract P-value
p_value <- signif(summary(anova)[[1]][["Pr(>F)"]][1],3)

# Contrast with Tukey Adjustmnet + Assign letters
emmcld <- anova |>
emmeans(~ sample) |>
  multcomp::cld(Letters = letters, 
                adjust = "Tukey",
                sort = FALSE)



## Data Summary ##
dt_summary <- AOC_iAUC_summary |>
  group_by(sample) |>
        summarize(mean = mean(iAUC),
                  sd = sd(iAUC))
## cbind

gg_df <- left_join(dt_summary, emmcld, by = "sample")

ggplot() + 
        
        geom_bar(data = gg_df,
    aes(y = mean, x = sample, fill = sample), stat = "identity", show.legend = TRUE) +
        
        geom_errorbar(data = gg_df,
                aes(
                  ymin = mean - sd,
                  ymax = mean + sd,
                  x = sample
                ),
                width = 0.1)  + 
        
        labs(x = "Sample", y = "iAUC") +
        
# letters
  geom_text(
    data = gg_df,
    aes(
      y = emmean + sd,
      x = sample,
      label = str_trim(.group)
    ),
    hjust = 0.5,
    vjust = -0.5,
    size=8
  ) +
        theme_classic() +
        theme(axis.text = element_text(angle = 90, color = "black"),
              text = element_text(size = 20),
              legend.position = "top") +
        ylim(0, max(gg_df$mean)*1.5)
```

## Conclusion

1)  Assay works well on ApoB-depleted plasma, but not isolated HDL.

2)  We can further dilute plasma from 2% down to 1%.
